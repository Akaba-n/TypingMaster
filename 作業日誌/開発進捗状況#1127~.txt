【制作内容】競技用タイピングソフト
【研究内容】HTTP通信の世間での印象と実際の動作の差異について

【売り】相手の通信状況によってストレスが溜まるという事が無いような構造にしたい(安定性？)
		情報処理学科の視点からゲームエンジンのクラスの比較などを逐一行いゲーム制作の手伝いになるような(?)研究

		制作＋比較・研究
		気になったことは逐一比較しつつ制作を進める
			・Unityのオブジェクトの比較
				→情報処理学科からの視点で


(1)作業項目毎の進捗状況と評価：
－－－－－＋－－－＋－－－＋－－－－－－－－－－－－－－－－－－－－－－－－－－
作業項目　　〆切　　進捗　　補足説明
－－－－－＋－－－＋－－－＋－－－－－－－－－－－－－－－－－－－－－－－－－－
環境構築			完了	とりあえず第一段階で必要な物は完了。
							AWSでのLAMP環境構築、Unityセットアップ。
							node.jsのインストールも必要な可能性あり。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
マルチ対戦部分作成(優先度：１)
			12/10	50%		取り敢えず動くもの作成。
~~~~~~~~~~~~~~~~~
プレイヤータイピング部分(C)
			12/4	100%	プレイヤーの情報とゲームの流れをある程度分かりやすくまとめる事が出来たので終了。

対戦相手情報取得(S,C)
			12/7	5%		打った情報をJson形式でサーバーに送信。PlayerIdファイル名のJsonファイルの形で保存し、対戦相手のIDで情報検索を出来るようにする。この段階では手動でID入れてマッチング

マッチングシステム(S)
			12/10	0%		対戦相手の検索機能

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ランキング・データ確認機能作成(優先度：２)
			12/13	未着手
~~~~~~~~~~~~~~~~~
データベース作成(S)
			12/9	0%		ユーザーデータ管理用・ユーザー記録管理用
ランキングページ作成(C,S)
			12/11	0%		ランキング確認ページ(オンライン時のみ)
プレイヤーデータ確認ページ作成(C)
			12/13	0%		自分のはオフラインでも確認可能に(csv形式などで保管)。オンラインになった時に同期させる。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ソロモード作成(優先度：２)
			12/14	0%
~~~~~~~~~~~~~~~~~
ソロモード作成
			12/14	0%		マルチ対戦で制作したプレイヤータイピング部分を横流しして作成(ちゃんとクラス分けしてれば簡単に出来るはず...)
							結果はcsvファイルに保存。csv->サーバはゲーム起動時に行う。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ユーザー情報確認用webページ作成
			12/17	0%
~~~~~~~~~~~~~~~~~
ユーザー情報確認ページ
			12/15	0%		取り敢えず一括表示。
ユーザー総数等確認ページ
			12/17	0%		グラフなどで分かりやすく。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
大会モード作成(優先度：３)
			12/14	0%
~~~~~~~~~~~~~~~~~
ルーム作成部分(C,S)
			12/10	0%		主催者のルーム作成機能
ルーム検索部分(C,S)
			12/12	0%		参加者のルーム参加機能
観戦機能(C,S)
			12/14	0%		観戦機能
対戦機能(C,S)
			12/19	0%		対戦部分

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
システム開発(作品ブラッシュアップ)
			最後まで	未着手　制作途中で付けたくなった様々な機能の追加
~~~~~~~~~~~~~~~~~
ランキング機能
大会モード
管理画面作成

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
比較実験	1/14	未着手

締め切り	1/29


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
時間があったらやりたい事
~~~~~~~~~~~~~~~~~
ユーザー登録
	グループ作成(学校や学科単位でのランキング要素等)
成績管理
大会モード
	観戦機能
管理画面作成

－－－－－＋－－－＋－－－＋－－－－－－－－－－－－－－－－－－－－－－－－－－

(2)今回実行した作業



(3)使用サイトURL
----- ファイル操作関連 -----
【マッチングサーバ仕組み】
MONOBIT マッチングアルゴリズム
http://www.monobitengine.com/document/main051.htm
【Unity メモリ管理】
C# ゲームプログラミングはホントにメモリに無頓着で良いの？
https://www.slideshare.net/KMC_JP/c-91154309


(4)気になるポイント
・HTTP通信にWWWクラスを使っている物とUnityWebRequestを使っている物の差
	→今回はWWWクラスを使ったけどUnityWebRequestを使った方が柔軟性高くなりそう？


世の中の認識と通信規格の実態が合っているかどうかの比較
小論文10枚程度
	技術要素を入れる
	何故その技術を使ったのか

(5)問題点
Unityでスクリプトをオブジェクトにアタッチ出来なくなった。新しくファイル作って試しても出来ないので謎。

(6)次回までにやる事
・タイピングゲーム部分の作成
	・問題文の作成
		→CSVファイルの形式で日本語文とひらがな文が入っている形式の物
	・問題文の表示
・ユーザー情報が絡んでくる部分の設計の詰め
・UnityWebRequestとWWWクラスの比較


(7)メモ
・問題文データセットは初期サンプルを除いてオンラインからダウンロードする形式
	ページから追加も出来る。
・時間毎のKPMのグラフ化
・プレイヤーIDとプレイヤーName、その他confingはUnityのPlayerPrefsで一括管理
	PlayerPrefsはXML形式で一括管理されているらしい